import sys
from time import sleep
import pygame
from settings import Settings
from ship import Ship #Ship class import ki gai h ship file s
from bullet import Bullet
from alien import Alien
from game_stats import GameStats
class AlienInvasion:
	def __init__(self):
		pygame.init()
		self.settings=Settings()
		self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
		self.settings.screen_width = self.screen.get_rect().width
		self.settings.screen_height = self.screen.get_rect().height
		pygame.display.set_caption("ALIEN AGYEE, HAMLAAAAAA KARO")
		self.ship = Ship(self) #self.ship ye ship.py file ka name hota h and Ship(self) class ka name hota h jo ko ship me h
		self.bullets=pygame.sprite.Group()
		self.aliens = pygame.sprite.Group()
		self._create_fleet()

	def run_game(self):
		while True:
			self._check_events()
			self.ship.update()
			self.bullets.update()
			self._update_bullets()
			self._update_aliens()
			self.update_screen()

	def _check_events(self):
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				sys.exit()
			elif event.type == pygame.KEYDOWN:
				self._check_keydown_events(event)
			elif event.type == pygame.KEYUP:
				self._check_keyup_events(event)

	def _check_keydown_events(self,event):
		if event.key == pygame.K_RIGHT:
			self.ship.moving_right=True
		elif event.key == pygame.K_LEFT:
			self.ship.moving_left = True
		elif event.key == pygame.K_q :
			sys.exit()
		elif event.key == pygame.K_SPACE:
			self._fire_bullet()

	def _check_keyup_events(self, event):
		if event.key == pygame.K_RIGHT:
			self.ship.moving_right = False
		elif event.key == pygame.K_LEFT:
			self.ship.moving_left = False

	def _fire_bullet(self):
		if len(self.bullets) < self.settings.bullets_allowed:
			new_bullet = Bullet(self)
			self.bullets.add(new_bullet)

	def update_screen(self):
		self.screen.fill(self.settings.bg_color)
		self.ship.blitme() #this is from ship.py
		for bullet in self.bullets.sprites():
			bullet.draw_bullet()
		self.aliens.draw(self.screen)
		pygame.display.flip()
	def _create_fleet(self):
		alien = Alien(self)
		alien_width,alien_height = alien.rect.size
		alien_width = alien.rect.width
		available_space_x = self.settings.screen_width - (2 * alien_width) #avilable space utna hoga jitna 2*alien ki widhth hogi kyu beech me space h ek width ki
		number_aliens_x = available_space_x // (2 * alien_width)
		ship_height = self.ship.rect.height
		available_space_y = (self.settings.screen_height - (3 * alien_height) - ship_height)
		number_rows = available_space_y // (2 * alien_height)
		for row_number in range(5):
			for alien_number in range(number_aliens_x):
				self._create_alien(alien_number, row_number)

	def _create_alien(self, alien_number,row_number):
		alien = Alien(self)
		alien_width, alien_height = alien.rect.size
		alien_width = alien.rect.width
		alien.x = alien_width + 2 * alien_width * alien_number
		alien.rect.x = alien.x
		alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
		self.aliens.add(alien)

	def _update_aliens(self):
		self._check_fleet_edges()
		self.aliens.update()
		if pygame.sprite.spritecollideany(self.ship, self.aliens):
			print("ship hit!!!")
	def _check_fleet_edges(self):
		for alien in self.aliens.sprites():
			if alien.check_edges():
				self._check_fleet_direction()
				break
	def _check_fleet_direction(self):
		for alien in self.aliens.sprites():
			alien.rect.y += self.settings.fleet_drop_speed
		self.settings.fleet_direction *= -1
	def _update_bullets(self):
		self.bullets.update()
		for bullet in self.bullets.copy():
			if bullet.rect.bottom <=0:
				self.bullets.remove(bullet)
		self._check_bullet_alien_collision()
	def _check_bullet_alien_collision(self):
		collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)
		if not self.aliens:
			self.bullets.empty()
			self._create_fleet()
if __name__ == '__main__' :
	ai=AlienInvasion()
	ai.run_game()




